name: Docs – Auto Sync to Import
on:
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * *"   # daily
  repository_dispatch:
    types: [sync-import]

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      FE_REPO: tqlismqn/gtrack-app
      BE_REPO: tqlismqn/gtrack-backend
      PR_BRANCH_PREFIX: sync
    steps:
      - name: Checkout gtrack-docs
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Guard secret
        run: |
          [ -n "${{ secrets.SYNC_REPOS_TOKEN }}" ] || { echo "::error::Secret SYNC_REPOS_TOKEN missing"; exit 1; }

      - name: Checkout gtrack-app (docs)
        uses: actions/checkout@v4
        with:
          submodules: false
          repository: ${{ env.FE_REPO }}
          ref: main
          path: fe
          token: ${{ secrets.SYNC_REPOS_TOKEN }}
          fetch-depth: 1

      - name: Checkout gtrack-backend (docs)
        uses: actions/checkout@v4
        with:
          submodules: false
          repository: ${{ env.BE_REPO }}
          ref: main
          path: be
          token: ${{ secrets.SYNC_REPOS_TOKEN }}
          fetch-depth: 1

      - name: Copy into import tree
        run: |
          mkdir -p docs/import/frontend/gtrack-app docs/import/backend/gtrack-backend
          rsync -a --delete fe/docs/ docs/import/frontend/gtrack-app/ || true
          rsync -a --delete be/docs/ docs/import/backend/gtrack-backend/ || true

      - name: Generate per-repo indexes
        shell: bash
        run: |
          set -euo pipefail
          make_idx () {
            dir="$1"; title="$2"
            mkdir -p "$dir"
            {
              echo "# ${title} — импортированные файлы"
              echo
              shopt -s nullglob
              for f in "$dir"/*.md; do
                bn=$(basename "$f")
                [ "$bn" = "index.md" ] && continue
                echo "- [${bn}](${bn})"
              done
            } > "$dir/index.md"
          }
          make_idx docs/import/frontend/gtrack-app "gtrack-app"
          make_idx docs/import/backend/gtrack-backend "gtrack-backend"

      - name: Generate import indexes
        shell: bash
        run: |
          set -euo pipefail
          gen_root () {
            local dir="$1" title="$2" intro="$3"
            mkdir -p "$dir"
            shopt -s nullglob
            local subdirs=("$dir"/*/)
            {
              echo "# ${title}"
              echo
              echo "${intro}"
              echo
              echo "## Репозитории"
              if [ ${#subdirs[@]} -eq 0 ]; then
                echo "_Нет импортированных репозиториев._"
              else
                for d in "${subdirs[@]}"; do
                  local bn
                  bn=$(basename "$d")
                  echo "- [${bn}](${bn}/index.md)"
                done
              fi
              echo
              echo "> Список файлов внутри репозитория показывается на его странице."
            } > "$dir/index.md"
          }
          gen_root docs/import/frontend "Frontend — Imported Docs" "Автосинхронизация складывает сюда содержимое \`/docs/**\` из фронтенд-репозиториев."
          gen_root docs/import/backend "Backend — Imported Docs" "Автосинхронизация складывает сюда содержимое \`/docs/**\` из бэкенд-репозиториев."

      - name: Show summary
        run: git status --short

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.SYNC_REPOS_TOKEN }}
          commit-message: "docs(sync): import FE/BE docs + regenerate import indexes"
          title: "docs(sync): import FE/BE docs"
          body: "Auto-sync from `${{ env.FE_REPO }}` and `${{ env.BE_REPO }}`."
          labels: docs,sync,automerge
          branch: ${{ env.PR_BRANCH_PREFIX }}/combined
          branch-suffix: timestamp
          delete-branch: true

      - name: Auto-close older sync PRs
        if: ${{ steps.cpr.outputs.pull-request-number != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const current = Number('${{ steps.cpr.outputs.pull-request-number }}');
            const {owner, repo} = context.repo;
            const prs = await github.paginate(github.rest.pulls.list, {owner, repo, state: 'open', per_page: 100});
            for (const pr of prs) {
              if (pr.number !== current && pr.title.startsWith('docs(sync):')) {
                await github.rest.issues.addLabels({owner, repo, issue_number: pr.number, labels: ['superseded']}).catch(()=>{});
                await github.rest.pulls.update({owner, repo, pull_number: pr.number, state: 'closed'});
                core.info(`Closed stale sync PR #${pr.number}`);
              }
            }
