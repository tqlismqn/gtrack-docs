name: Docs â€“ Auto Sync to Import
on:
  workflow_dispatch:
    inputs:
      plan_path:
        description: "Path to sync plan YAML"
        required: false
        default: "docs/import/config/sync.plan.yaml"
      owner:
        description: "Owner/org of source repos (blank = current owner)"
        required: false
        default: ""
permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      PLAN_PATH: ${{ github.event.inputs.plan_path || 'docs/import/config/sync.plan.yaml' }}
      OWNER: ${{ github.event.inputs.owner || github.repository_owner }}
    steps:
      - name: Checkout docs repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pick token for private repos
        id: tok
        shell: bash
        run: |
          if [[ -n "${{ secrets.SYNC_TOKEN }}" ]]; then
            echo "token=${{ secrets.SYNC_TOKEN }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "${{ secrets.SingToken }}" ]]; then
            echo "token=${{ secrets.SingToken }}" >> "$GITHUB_OUTPUT"
          else
            echo "token=${{ github.token }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq yq git

      - name: Load plan
        id: plan
        shell: bash
        run: |
          test -f "$PLAN_PATH" || { echo "::error title=Missing plan::$PLAN_PATH not found"; exit 2; }
          echo "repos=$(yq -o=json '.' "$PLAN_PATH")" >> $GITHUB_OUTPUT

      - name: Sync sources as per plan
        shell: bash
        env:
          GH_TOKEN: ${{ steps.tok.outputs.token }}
        run: |
          set -euo pipefail
          mkdir -p docs/import
          # PLAN is YAML: top-level keys = repo names
          REPOS=$(yq -r 'keys | .[]' "$PLAN_PATH")
          for NAME in $REPOS; do
            REF=$(yq -r ".\"$NAME\".ref // \"\"" "$PLAN_PATH")
            echo "::group::Sync $NAME (ref=${REF:-default})"
            SRC="${OWNER}/${NAME}"
            # shallow, filter blobs
            rm -rf "tmp/$NAME"
            git clone --filter=blob:none --no-checkout "https://x-access-token:${GH_TOKEN}@github.com/${SRC}.git" "tmp/$NAME"
            pushd "tmp/$NAME" >/dev/null
              if [[ -n "$REF" && "$REF" != "null" ]]; then git switch -c _sync "$REF" || git checkout "$REF" || true; fi
              git sparse-checkout init --no-cone
              # apply include patterns
              INC_TEMP=$(mktemp)
              yq -r ".\"$NAME\".include[]?" "$PLAN_PATH" > "$INC_TEMP" || true
              if [[ -s "$INC_TEMP" ]]; then
                while IFS= read -r p; do [[ -n "$p" ]] && git sparse-checkout add "$p"; done < "$INC_TEMP"
              else
                # default includes
                git sparse-checkout add docs/** spec/** **/openapi/*.{yaml,yml,json} **/README.md
              fi
              git checkout -f
            popd >/dev/null

            # Copy with excludes
            DEST="docs/import/${NAME}"
            rm -rf "$DEST" && mkdir -p "$DEST"
            rsync -av --prune-empty-dirs --include='*/' \
              --include='*.md' --include='*.yml' --include='*.yaml' --include='*.json' \
              --exclude='.git' "tmp/$NAME/" "$DEST/"

            # extra excludes from plan
            EXC_TEMP=$(mktemp)
            yq -r ".\"$NAME\".exclude[]?" "$PLAN_PATH" > "$EXC_TEMP" || true
            if [[ -s "$EXC_TEMP" ]]; then
              while IFS= read -r pat; do
                [[ -z "$pat" ]] && continue
                # delete matches under DEST
                find "$DEST" -path "$DEST/${pat}" -print -exec rm -rf {} + 2>/dev/null || true
              done < "$EXC_TEMP"
            fi

            echo "::endgroup::"
          done

      - name: Commit & PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          add-paths: |
            docs/import/**
          branch: ci/docs-auto-sync
          title: "docs(sync): import from frontend/backend per plan"
          labels: codex,docs,sync
          commit-message: "docs(sync): import sources as per plan"
