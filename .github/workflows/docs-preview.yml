name: Docs - Preview
on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
permissions:
  contents: read

jobs:
  check-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Проверяем, что wheelhouse не пустой и lock существует
      - name: Detect wheelhouse/lock
        id: guard
        run: |
          WCOUNT=$(ls -1 docs/vendor/wheels/*.whl 2>/dev/null | wc -l | tr -d ' ')
          LSIZE=$(test -f docs/requirements.lock.txt && wc -c < docs/requirements.lock.txt | tr -d ' ' || echo 0)
          echo "wheel_count=$WCOUNT" >> $GITHUB_OUTPUT
          echo "lock_size=$LSIZE" >> $GITHUB_OUTPUT
          if [ "$WCOUNT" -gt 0 ] && [ "$LSIZE" -gt 0 ]; then
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Install docs deps (OFFLINE from wheelhouse)
        if: steps.guard.outputs.ready == 'true'
        env:
          PIP_NO_INDEX: "1"
          PIP_FIND_LINKS: "docs/vendor/wheels"
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
        run: |
          python -m pip install -U pip
          python -m pip install --no-index --find-links docs/vendor/wheels -r docs/requirements.lock.txt
          python -c "import mkdocs; print('mkdocs', mkdocs.__version__)"

      - name: Build docs (strict)
        if: steps.guard.outputs.ready == 'true'
        run: |
          python -m mkdocs build --strict

      - name: Skip build (wheelhouse not ready yet)
        if: steps.guard.outputs.ready != 'true'
        run: |
          echo "::notice title=Docs build skipped::Wheelhouse пустой или lock отсутствует. Это ожидаемо для первого PR с офлайн-инфрой. \
          Merge PR, затем запусти вручную workflow 'Docs - Refresh Wheels' и повтори."
