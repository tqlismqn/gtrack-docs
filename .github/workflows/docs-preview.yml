name: check-docs
on:
  pull_request:
    branches: [ main ]
  pull_request_target:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

jobs:
  check-docs:
    name: check-docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Detect wheelhouse/lock
        id: guard
        run: |
          WCOUNT=$(ls -1 docs/vendor/wheels/*.whl 2>/dev/null | wc -l | tr -d ' ')
          LSIZE=$(test -f docs/requirements.lock.txt && wc -c < docs/requirements.lock.txt | tr -d ' ' || echo 0)
          READY=false; [ "$WCOUNT" -gt 0 ] && [ "$LSIZE" -gt 0 ] && READY=true
          echo "ready=$READY" >> $GITHUB_OUTPUT
          echo "wheel_count=$WCOUNT" >> $GITHUB_OUTPUT
          echo "lock_size=$LSIZE" >> $GITHUB_OUTPUT

      - name: Offline install
        if: steps.guard.outputs.ready == 'true'
        env:
          PIP_NO_INDEX: "1"
          PIP_FIND_LINKS: "docs/vendor/wheels"
        run: |
          python -m pip --version
          python -m pip install --no-index --find-links docs/vendor/wheels -r docs/requirements.lock.txt

      - name: Ensure Import placeholder
        if: steps.guard.outputs.ready == 'true'
        run: |
          mkdir -p docs/import
          [ -f docs/import/index.md ] || printf '# Import (autogen)\n\nPlaceholder.\n' > docs/import/index.md

      - name: Build docs (strict)
        if: steps.guard.outputs.ready == 'true'
        run: python -m mkdocs build --strict

      - name: "Skip build until offline assets are present"
        if: steps.guard.outputs.ready != 'true'
        run: |
          echo "Skipping docs check: wheels=${{ steps.guard.outputs.wheel_count }} lock=${{ steps.guard.outputs.lock_size }}"
