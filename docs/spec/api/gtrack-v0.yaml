openapi: 3.1.0
info:
  title: G-Track API v0
  version: 0.0.1
  description: >
    Mock API surface for frontend integration (no DB). Stable endpoints: /health, /drivers, /drivers/{id}.
servers:
  - url: http://localhost:3000
    description: Local mock/dev
paths:
  /health:
    get:
      summary: Service health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [status]
                properties:
                  status:
                    type: string
                    example: ok
  /drivers:
    get:
      summary: List drivers (pagination + filters)
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number (>=1).
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
          description: Page size (1..100).
        - in: query
          name: search
          schema: { type: string, minLength: 1 }
          description: Substring filter by firstName/lastName/email/rc.
        - in: query
          name: status
          schema:
            type: string
            enum: [Active, OnLeave, Inactive, Terminated]
          description: Status filter.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDrivers'
        '400':
          description: Validation error
  /drivers/{id}:
    get:
      summary: Get driver by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Driver' }
        '404':
          description: Not Found
components:
  schemas:
    Driver:
      type: object
      additionalProperties: false
      required: [id, firstName, lastName, status]
      properties:
        id: { type: string, example: d1 }
        firstName: { type: string, example: Jan }
        lastName: { type: string, example: Nov√°k }
        rc: { type: string, nullable: true, example: "800101/1234" }
        citizenship: { type: string, nullable: true, example: CZ }
        phone: { type: string, nullable: true, example: "+420 777 000 001" }
        email: { type: string, format: email, nullable: true, example: jan.novak@example.com }
        status:
          type: string
          enum: [Active, OnLeave, Inactive, Terminated]
        documents:
          type: object
          nullable: true
          properties:
            license:
              type: object
              nullable: true
              required: [number]
              properties:
                number: { type: string, example: CZ1234567 }
                validUntil: { type: string, format: date, nullable: true, example: "2027-05-31" }
            passport:
              type: object
              nullable: true
              properties:
                number: { type: string, example: P1234567 }
                validUntil: { type: string, format: date, nullable: true, example: "2030-12-31" }
    PaginationMeta:
      type: object
      additionalProperties: false
      required: [page, limit, total, totalPages]
      properties:
        page: { type: integer, example: 1 }
        limit: { type: integer, example: 20 }
        total: { type: integer, example: 5 }
        totalPages: { type: integer, example: 1 }
    PaginatedDrivers:
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Driver' }
        meta:
          $ref: '#/components/schemas/PaginationMeta'
